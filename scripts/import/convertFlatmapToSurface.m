function convertFlatmapToSurface(inFile,templateFile,oName,fsPath)
    % createFreesurferFlatMap takes a flatmap patch generated by freesurfer
    % (e.g., lh.cortex.patch.flat) and converts it to a freesurfer surface
    % file (e.g., lh.flat). It converts the indices of the flatmap to fit the
    % shape of the surface that was flattened. This makes it
    % easier/possible to "patch" the flatmap and maps that fit it in e.g.
    % matlab. It uses freesurfer's mris_convert to turn the flat map into
    % an asc file, then parses vertex indices and coordinates. It then uses
    % the shape of the surface that was flattened to expand the coordinates
    % in the flatmap. Expanded vertices and faces of the flatmap are then
    % written as a freesurfer surface file. 
    % 
    % Inputs--------------
    % inFile: path to a flatmap to convert. For example, 
    % '/Applications/freesurfer/7.1.0/subjects/fsaverage/surf/rh.cortex.patch.flat'
    %
    % templateFile: path to the surface that was flattened. For example, 
    % '/Applications/freesurfer/7.1.0/subjects/fsaverage/surf/lh.inflated'
    %
    % oName: path to output file (i.e., converted flatmap). For example, 
    % '/Users/alex/rut/rh.flat'
    %
    % fsPath: path to freesurfer. For example, '/Applications/freesurfer/7.1.0'
    %
    % alex.teghipco@sc.edu
    
    % get freesurfer path
    if isempty(fsPath)
        fsPath = '/Applications/freesurfer/7.1.0';
    end
    setenv('FS_LICENSE', [fsPath '/license.txt']);
    fsPath = [fsPath '/bin'];
    
    [opth,~,~] = fileparts(oName);
    if isempty(opth)
        opth = pwd;
    end

    % convert input file to asc
    id = strfind(inFile,'/');
    ascFile = [opth '/' inFile(id(end)+1:end) '.asc'];
    system([fsPath '/mris_convert -p ' inFile ' ' ascFile])
    
    % Open the file
    fid = fopen(ascFile,'r');
    
    % Initialize a cell array
    cellArray = {};
    
    % Read the file line by line
    line = fgetl(fid);
    while ischar(line)
        cellArray{end+1} = line;
        line = fgetl(fid);
    end
    
    % Close the file
    fclose(fid);

    % Get some meta-data about size
    meta = str2num(cellArray{2});
    nvert = meta(1);
    nface = meta(2);
    
    % get vertices
    vertids = cellArray(3:2:(nvert*2)+2);
    vertids2 = str2double(extractBefore(vertids,' vno='));
    vertids3 = str2double(extractAfter(vertids,' vno='));
    
    % get coordinates
    coords = cellArray(4:2:(nvert*2)+2);
    numCellArray = cellfun(@(x) str2double(strsplit(x)), coords, 'UniformOutput', false);
    coords2 = cell2mat(numCellArray');
    
    % get faces
    faceids = cellArray((nvert*2)+3:2:end);
    faceids = str2double(faceids);
    faces = cellArray((nvert*2)+4:2:end);
    faces = cellfun(@(x) str2double(strsplit(x)), faces, 'UniformOutput', false);
    faces = cell2mat(faces');
    faces(:,4) = [];
   
    % make vertices fit template file
    [vertO, ~] = read_surf(templateFile);
    clear vertex_coords2
    vertex_coords2 = zeros(size(vertO));
    vertex_coords2(vertids3+1,1) = coords2(:,1);
    vertex_coords2(vertids3+1,2) = coords2(:,2);
    vertex_coords2(vertids3+1,3) = coords2(:,3);
    
    write_surf(oName, vertex_coords2, faces+1);
end